<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="project.e_P002_D003">
<!-- 리절트 맵 정의 -->	
                <!-- 상품 이미지 -->
     <resultMap id="e_P002_D003PhotoVO" type="e_P002_D003PhotoVO">
	 <result property="prodNum" column="PRODNUM" />
	 <result property="pPhotoNum" column="PPHOTONUM" />
	 <result property="createDat" column="CREATEDAT" />
	 <result property="upDateDat" column="UPDATEDAT" />
     <result property="content" column="CONTENT"  />
     <result property="contentDetail" column="CONTENTDETAIL"  />
     <result property="originalFileName" column="ORIGINALFILENAME" />
     <result property="fileSize" column="FILESIZE" />
	</resultMap>
	
	 <resultMap id="OptionVO" type="OptionVO">
	 <result property="optionNum" column="OPTIONNUM" />
	 <result property="prodNum" column="PRODNUM" />
	 <result property="prodSize" column="PRODSIZE" />
	 <result property="color" column="COLOR" />
     <result property="quantity" column="QUANTITY"  />
     <result property="prodstatus" column="PRODSTATUS"  />
     <result property="updateDate" column="UPDATEDATE" />
     <result property="modDate" column="MODDATE" />
	</resultMap>
	             <!-- 상품 상세내용 -->
	<resultMap id="e_P002_D003ProductsVO" type="e_P002_D003ProductsVO">
		<result property="prodNum" column="PRODNUM" />
		<result property="pCategoryNum" column="PCATEGORYNUM" />
		<result property="name" column="NAME" />
		<result property="price" column="PRICE" />
		<result property="content" column="CONTENT"  />
		<result property="type" column="TYPE" />
		<result property="createDat" column="CREATEDAT" />
		<result property="updateDat" column="UPDATEDAT" />
	</resultMap>
		
		 <!-- 후기 vo -->
	<resultMap id="productAfterVO" type="productAfterVO">
		<result property="userNum" column="USERNUM" />
		<result property="afterNum" column="AFTERNUM" />
		<result property="prodNum" column="PRODNUM" />
		<result property="content" column="CONTENT" />
		<result property="afterType" column="AFTERTYPE" />
		<result property="photo" column="PHOTO" />
		<result property="photoName" column="PHOTONAME"/>
		<result property="createDat" column="CREATEDAT" />
		<result property="updateDat" column="UPDATEDAT" />
		<result property="evalue" column="EVALUE" />
		<result property="lvl" column="lvl" />
	</resultMap>   
	
	     <!-- 배송지 -->
	  <resultMap type="deliveryVO" id="deliveryVO">
	     <result property="userNum" column="USERNUM" />
	     <result property="deliNum" column="DELINUM" />
	     <result property="address" column="ADDRESS" />
	     <result property="address2" column="ADDRESS2" />
	     <result property="zonecode" column="ZONECODE" />
	     <result property="createDat" column="CREATEDAT" />
	     <result property="updateDat" column="UPDATEDAT" />
	     <result property="deliBasic" column="DELIBASIC" />
	     <result property="custName" column="CUSTNAME" />
	     <result property="custPhonNum" column="CUSTPHONNUM" />
	  </resultMap>
	  
	       <!-- 유저 -->
	  <resultMap id="userVO" type="userVO">
		<result property="userNum" column="userNum" />
		<result property="id" column="id" />
		<result property="password" column="password" />
		<result property="name" column="name" />
		<result property="sex" column="sex" />
		<result property="phone" column="phone" />
		<result property="address" column="address" />
		<result property="address2" column="address2" />
		<result property="zonecode" column="zonecode" />
		<result property="email" column="email" />
		<result property="type" column="type" />
		<result property="status" column="status" />
		<result property="createdAt" column="createdAt" />
		<result property="updatedAt" column="updatedAt" />
		<result property="sex2" column="sex2" />
		<result property="sessionId" column="sessionId" />
		<result property="sessionLimit" column="sessionLimit" />
		<result property="profile" column="profile" />
		<result property="content" column="content" />
	</resultMap>
	  
	  
	    <!-- 포인트 -->
       <resultMap type="pointVO" id="pointVO">
	     <result property="userNum" column="USERNUM" />
	     <result property="startDate" column="STARTDATE" />
	     <result property="endDate" column="ENDDATE" />
	     <result property="type" column="TYPE" />
	     <result property="used" column="USED" />
	     <result property="result" column="RESULT" />
	     <result property="orderNum" column="ORDERNUM" />
	     <result property="createDat" column="CREATEDAT" />
	     <result property="updateDat" column="UPDATEDAT" />
	     <result property="payType" column="PAYTYPE" />
	  </resultMap>
	  
		      <!-- 지불 vo -->
	  <resultMap type="paymentVO" id="paymentVO">
	     <result property="orderNum" column="ORDERNUM" />
	     <result property="type" column="TYPE" />
	     <result property="createDat" column="CREATEDAT" />
	     <result property="updateDat" column="UPDATEDAT" />
	     <result property="buyerName" column="BUYERNAME" />
	     <result property="merchant_uid" column="MERCHANT_UID" />
	     <result property="imp_uid" column="IMP_UID" />
	     <result property="apply_num" column="APPLY_NUM" />
	  </resultMap>
	  
	  
	  <!--orders 장바구니 -->
	  <resultMap type="OrdersVO" id="OrdersVO">
	     <result property="orderNum" column="ORDERNUM" />
	     <result property="userNum" column="USERNUM" />
	     <result property="ordereDat" column="ORDEREDAT" />
	     <result property="price" column="PRICE" />
	     <result property="charge" column="CHARGE" />
	     <result property="orderStatus" column="ORDERSTATUS" />
	     <result property="deliveryStatus" column="DELIVERYSTATUS" />
	     <result property="orderType" column="ORDERTYPE" />
	     <result property="prodNum" column="PRODNUM" />
	     <result property="quantity" column="QUANTITY" />
	     <result property="prodName" column="PRODNAME" />
	     <result property="payTotal" column="PAYTOTAL" />
	  </resultMap>
	  
		  <!-- 페이징 -->
	<resultMap id="Paging" type="Paging">
		<result property="start"  />
		<result property="end"  />
		<result property="nowPage"  />
		<result property="startPage"  />
		<result property="endPage"  />
		<result property="total"  />
		<result property="cntPerPage"  />
		<result property="lastPage"  />
		<result property="listType"  />
	</resultMap>
	

<!-- ////////////////////////////////////////////////////////////////////// -->
	<!-- 총 게시글 갯수 출력 -->
       <select id="countBoard" resultType="int">
	      SELECT COUNT(*) FROM products
       </select>
       
       <!-- 아작스 테스트 -->
       <select id="ajaxTotal" resultType="int">
	      SELECT COUNT(*) FROM products
       </select>
       
       <!-- 아작스 테스트 -->
       <select id="ajaxResult" resultType="map" parameterType="java.util.Map">
	      	SELECT  PRODNUM,
                     NAME,
                    PRICE,
                  CONTENT,
                    TYPE,
                     to_char(CREATEDAT,'yyyy-mm-dd hh:mi'),
                     USERNUM,
                   PRODCATEGORYNUM,
                  REQUIRECOMMENT,
                      CNTCOUNT
		FROM (
			SELECT ROWNUM RN, A.* 
				FROM (
						SELECT * 
						FROM products 
						ORDER BY prodnum DESC 
						) A
				)
	    WHERE RN BETWEEN #{start} AND #{end}
       </select>
       
       
       <!-- 아이비시트 테스트 -->
       <select id="ibsheetResult" resultType="map">
	      	SELECT  PRODNUM,
                     NAME,
                    PRICE,
                  CONTENT,
                    TYPE,
                     to_char(CREATEDAT,'yyyy-mm-dd hh:mi'),
                     USERNUM,
                   PRODCATEGORYNUM,
                  REQUIRECOMMENT,
                      CNTCOUNT
		FROM products
       </select>
       
       	<!--후기 총 개수 출력 -->
       <select id="afterTotal" resultType="int" parameterType="java.util.Map">
	      SELECT COUNT(*) FROM productafter
	      where prodNum = #{prodNum}
	      and aftertype is null
       </select>
       
       	<!-- 총 게시글 갯수 출력 카테고리 분류형 -->
       <select id="countBoard2" resultType="int" parameterType="java.util.Map">
	       <![CDATA[
	                       select count(*)
						FROM products p,prodPhoto io
                        where p.prodnum=io.prodnum
                        and io.pphotonum=1
                        and p.type not in (3,4)
	         ]]>
	         
	         <choose>
	         <when test="listType==100">
	         </when>
	         <!-- 200이면 검색이기때문에 검색어를 넣어줌 -->
              <when test="listType==200">
              and (p.name like trim('%'||#{searchContent}||'%') or p.content like trim('%'||#{searchContent}||'%'))
              </when>
              <otherwise>
            and p.PRODCATEGORYNUM = #{listType}
              </otherwise>
	         </choose>
       </select>
       
  	<!-- 상품상세 -->
       <select id="selectProductDetail" resultType="map" parameterType="java.util.Map">
	    <if test="userNum==0">
	    	       select op.color,op.prodsize,op.quantity,p.prodnum,(
                                                      select count(ORDERTYPE)
                                                      from orders 
                                                      where userNum= #{userNum}
                                                      and ordertype=4
                                                      and prodnum =#{prodNum})as checkBuy,
                   p.content,p.name,to_char(p.price,'999,999,999,999')as price,p.type,op.optionnum
           from products p, prodoption op 
           where p.prodnum=op.prodnum
           and p.PRODNUM = #{prodNum}
	    </if>
	    
	    <if test="userNum!=0">

         SELECT *
             FROM(select op.color,op.prodsize,op.quantity,p.prodnum,(
                                                      select count(ORDERTYPE)
                                                      from orders 
                                                      where userNum= #{userNum}
                                                      and ordertype=4
                                                      and prodnum =#{prodNum})as checkBuy,
              p.content,p.name,to_char(p.price,'999,999,999,999')as price,p.type,op.optionnum
           from products p, prodoption op 
           where p.prodnum=op.prodnum
           and p.PRODNUM = #{prodNum})A left OUTER JOIN (select DISTINCT prodnum,usernum
                                          from prodlike
                                         where usernum=#{userNum}) B on A.prodnum=B.prodnum 
	    </if> 
       </select>
       
       
  	<!-- 상품상세페이지의 이미지들 -->
       <select id="selectProductDetailImages" resultType="map" parameterType="java.util.Map">
           select *
            from prodphoto
           where PRODNUM = #{prodNum}
           and content is not null
       </select>
        
        <select id="selectProductDetailImagesBottom" resultType="map" parameterType="java.util.Map">
           select *
            from prodphoto
           where PRODNUM = #{prodNum}
           and contentdetail is not null
       </select>    
       
     <!-- 구매 성공 후 수량 빼기 -->   
    <!-- <update id="updateQuantity"  parameterType="java.util.Map">
     <![CDATA[
	     update products
	     set quantity = quantity- #{quantity}
	     where prodNum = #{prodNum}
      ]]>      
   </update> -->
   
   
     <!-- 구매 성공 후 수량 빼기 -->   
    <update id="modOption"  parameterType="java.util.Map">
     <![CDATA[
	  update orders
	     set quantity = #{quantity},
          ORDERTYPE= 2,
          optionnum = #{optionNum},
          orderedat = sysdate
	     where ordernum= #{ordernum}
      ]]>      
   </update> 
   
        <!-- 위시리스트 메모 업데이트 -->
    <update id="updateMemo"  parameterType="java.util.Map">
     <![CDATA[
	  update prodlike
	     set PRODCOMMENT = #{prodComment}
	     where likenum= #{likeNum}
      ]]>      
   </update> 
   
   
   <!-- 조회수 증가-->
    <update id="updateCNT" parameterType="java.util.Map">
     <![CDATA[
	  update products
	     set cntCount = cntCount+1
	     where prodNum= #{prodNum}
      ]]>      
   </update> 
   
   	    <!-- 구매 성공 후 수량 빼기 -->
	   <update id="updateQuantity"  parameterType="java.util.List">
        <foreach  item="item" collection="list"  index="index" 
      separator=";" open="DECLARE BEGIN" close="; END;" >
           UPDATE prodoption 
           SET quantity = quantity -#{item.quantity}
           WHERE prodNum= #{item.prodNum}
           and optionNum=#{item.optionNum}
      </foreach>
       </update> 
   
   
   
         <!-- 구매 성공 후 포인트 차감 -->
      <!--   <insert id="updatePoint"  parameterType="java.util.Map">
     <![CDATA[
	     MERGE INTO point
         USING dual
         ON (USERNUM = #{userNum} )
         WHEN MATCHED THEN
         UPDATE SET
          result= result+ #{totalPrice}
           WHERE usernum=#{userNum}
         
         WHEN NOT MATCHED THEN
         INSERT (USERNUM,STARTDATE,ENDDATE,USED,RESULT,ORDERNUM,CREATEDAT,PAYTYPE)
         VALUES (#{userNum},sysdate,'9999-12-31',0,#{point},#{orderNum},sysdate,'card')
      ]]>      
   </insert> -->   
   
<!--         <insert id="updatePoint"  parameterType="java.util.Map">
     <![CDATA[
         INSERT into point (POINTNUM,USERNUM,STARTDATE,ENDDATE,USED,RESULT,ORDERNUM,CREATEDAT,PAYTYPE)
         VALUES (#{poinNum},#{userNum},sysdate,'9999-12-31',0,#{result},#{orderNum},sysdate,'card')
      ]]>      
      </insert>  
    -->
    
    
      <insert id="updatePoint" parameterType="java.util.List">
	   insert into POINT(
	    POINTNUM,USERNUM,usedDay,USED,getpoint,ORDERNUM,UPDATEDAT,PAYTYPE
				    )
		        select  seq_point.nextval as POINTNUM, A.* from(
	 	<foreach collection="list" item="item" separator="union all" >
		        select  
				        #{item.userNum} as USERNUM,
				        sysdate as usedDay,
				        #{item.used} as  USED,
				        #{item.getPoint} as getpoint,
				        #{item.orderNum} as ORDERNUM,
				        sysdate as UPDATEDAT,
				        #{item.payType} as PAYTYPE
				        from dual
   		 </foreach>)A
     </insert>
   
   
   
   
          <select id="checkPointTable" resultType="map" parameterType="java.util.Map">
	      SELECT * FROM point
	      where userNum= #{userNum}
       </select>
       
       
              <!-- 상품 평균점수  decode(FLOOR(AVG(evalue)),null,0,FLOOR(AVG(evalue)))  -->
       <select id="prodAverage" resultType="float" parameterType="java.util.Map">
             select decode(ROUND(avg(evalue),1),null,0,ROUND(avg(evalue),1))  
             from productAfter
             where prodNum = #{prodNum}
       </select> 
       
                     <!-- 포인트-->
       <select id="getPoint" resultType="int" parameterType="java.util.Map">
                   select sum(getpoint) -sum(used)
                 from(
                  select distinct updatedat,getpoint,used
                  from point
                  where usernum=#{userNum}
                  ) 
       </select> 
       
                   <!-- 수량확인-->
       <select id="checkQuantity" resultType="int" parameterType="java.util.Map">
             select  quantity
             from PRODOPTION
             where prodnum= #{prodNum}
       </select> 
       
                    <!-- 배송지-->
       <select id="getAddress" resultType="map" parameterType="java.util.Map">
             select   *
             from delivery 
             where USERNUM = #{userNum}
             and  delibasic =1
       </select> 
       
                         <!-- 전체검색 카운트 (검색)-->
       <select id="searchAllTotal" resultType="int" parameterType="java.util.Map">
          select Count(*)
          from products
          <choose>
            <when test="searchContent != 'null' and searchType=='name'">
             where name like '%'||#{searchContent}||'%'
            </when>
           <when test="searchContent != 'null' and searchType=='content'">
             where content like '%'||#{searchContent}||'%'
            </when>
          </choose>       
       </select> 
       
                                <!-- 전체검색 결과 (검색)-->
       <select id="searchAllResult" resultType="map" parameterType="java.util.Map">
        SELECT * 
		FROM (
			SELECT ROWNUM RN, A.* 
				FROM (
						SELECT * 
						FROM products 
						ORDER BY SEQ DESC 
						) A
				)
	WHERE RN BETWEEN #{start} AND #{end}
          <choose>
            <when test="searchContent != 'null' and searchType=='name'">
             and name like '%'||#{searchContent}||'%'
            </when>
           <when test="searchContent != 'null' and searchType=='content'">
             and content like '%'||#{searchContent}||'%'
            </when>
          </choose>       
       </select> 
       
       
              	<!--검색 조건에 대한   파람정보  {search=clime, searchContent =''}         총 게시글 개수-->  
       <select id="searchTotal" resultType="int" parameterType="java.util.Map">
	       <![CDATA[
	      select count(DISTINCT(b.prodnum))
             from (select *
                   from prodcategory
                  start with PARENTCATEGORYNUM is null
                  connect by prior PRODCATEGORYNUM=PARENTCATEGORYNUM
              )a ,products b 
	          where a.PRODCATEGORYNUM=b.PRODCATEGORYNUM
	          and b.type not in (3,4)
	         ]]>
	         <choose>
	            <when test="searchContent !=null and searchContent !=''">
	            
	              and b.name like trim('%'||#{searchContent}||'%') or b.content like trim('%'||#{searchContent}||'%')
	            </when>
	            <otherwise>
	            </otherwise>
	         </choose>
	   
	   
	         
    		 <!-- <choose>
    		  <when test="search==10 and searchContent != null and searchType=='name'  ">
                and b.name like '%'||#{searchContent}||'%'
              </when>
              <when test="search==10 and searchContent != null and searchType=='content'  ">
                and b.content like '%'||#{searchContent}||'%'
              </when>
             <when test="search==1 and searchContent != null and searchType=='name'  ">
             and a.PARENTCATEGORYNUM =1
             and b.name like '%'||#{searchContent}||'%'
              </when>
                <when test="search==2 and searchContent != null and searchType=='name'  ">
                and a.PARENTCATEGORYNUM =2
                and b.name like '%'||#{searchContent}||'%'
              </when>
               <when test="search==3 and searchContent != null and searchType=='name'  ">
               and a.PARENTCATEGORYNUM =3
                and b.name like '%'||#{searchContent}||'%'
              </when>
              
               <when test="search==1 and searchContent != null and searchType=='content'  ">
             and a.PARENTCATEGORYNUM =1
             and b.content like '%'||#{searchContent}||'%'
              </when>
                <when test="search==2 and searchContent != null and searchType=='content'  ">
                and a.PARENTCATEGORYNUM =2
                and b.content like '%'||#{searchContent}||'%'
              </when>
               <when test="search==3 and searchContent != null and searchType=='content'  ">
               and a.PARENTCATEGORYNUM =3
                and b.content like '%'||#{searchContent}||'%'
              </when>
            </choose> -->
       </select>




    <!-- 페이징 처리 후 게시글 조회                         메인화면-->
          <select id="selectProduct" resultType="e_P002_D003ProductsVO" parameterType="Paging">
            <![CDATA[
	          SELECT PRODNUM, PCATEGORYNUM,NAME,PRICE,CONTENT,QUANTITY,TYPE,CREATEDAT,UPDATEDAT
		       FROM (
			       SELECT ROWNUM RN, A.* 
				     FROM (
						SELECT * 
						FROM products 
						ORDER BY prodNum desc 
						) A
				    )
          where RN BETWEEN #{start} AND #{end} 
	            ]]>
       </select>
       
       <!--     상품 후기 조회                        상품 상세페이지
          <select id="afterList" resultType="map" parameterType="java.util.Map">
            <![CDATA[
                  select *
                from (select rownum as recum,
                                 lvl,                          
                      A.USERNUM,
                      u.id,
                      uin.content as image,
                      A.AFTERNUM,
                        A.prodNum,
                        A.content,
                      A.aftertype,      
                      A.createDat,
                        A.evalue,
                        A.photo,
                        A.photoName
                  from   (    SELECT LEVEL AS lvl,
                         USERNUM,AFTERNUM, prodNum,content,aftertype,createDat,evalue,photo,photoName
                               FROM productafter
                                 where prodNum= #{prodNum}
                                 START WITH aftertype is null
                                 CONNECT BY PRIOR AFTERNUM=aftertype
                                 ORDER SIBLINGS BY AFTERNUM desc) A , users u, userinfo uin
                   where A.usernum=u.usernum
                   and u.usernum =uin.usernum)
           where recum between #{start} and #{end}
                        
	            ]]>
       </select> -->
       
       
       
         <!-- 상품 후기 조회                        상품 상세페이지-->
          <select id="afterList" resultType="map" parameterType="java.util.Map">
            <![CDATA[
             select *
                from (select rownum as recum,
                      A.USERNUM,
                      A.cnt,
                      u.id,
                      uin.content2 as image,
                      A.AFTERNUM,
                        A.prodNum,
                        A.content,
                      A.aftertype,      
                      TO_CHAR(A.createDat,'YYYY-MM-DD HH:Mi')as createdat,
                        A.evalue,
                        A.photo,
                        A.photoName
                  from   (    
                         select  af.USERNUM,af.AFTERNUM, af.prodNum,af.content,af.aftertype,af.createDat,af.evalue,af.photo,af.photoName,(select count(*)
                         from productafter      
                         where aftertype= af.afternum) as cnt
                         from productafter af 
                         where af.aftertype is null
                         and af.prodnum= #{prodNum}
                         order by af.afternum desc) A , users u, userinfo uin
                   where A.usernum=u.usernum
                   and u.usernum =uin.usernum)
              where recum between #{start} and #{end}

	            ]]>
       </select>
       
       
       <!-- 페이징 처리 후 게시글 조회                메인      카테고리별 화면 -->
       <select id="selectProductCate" resultType="map" parameterType="java.util.Map">
         <![CDATA[
          SELECT *
		       FROM (
			       SELECT ROWNUM RN, A.* 
				     FROM (
					SELECT distinct p.PRODNUM, p.PRODCATEGORYNUM,p.NAME,p.PRICE as sortPrice,p.CONTENT,p.cntcount,
					  (select count(afternum)
                        from productafter
                          where prodnum=p.prodnum
                          and aftertype is null
                          )as afterCount,p.TYPE,p.CREATEDAT,p.UPDATEDAT,io.content as image , to_char(p.price,'999,999,999,999') as price
                          ,op.prodstatus
						FROM products p,prodPhoto io ,prodoption op
                        where p.prodnum=io.prodnum
                        and p.prodnum=op.prodnum 
                        and io.pphotonum=1
                        and p.type not in (3,4) 
                        and op.prodstatus=1
           ]]>
   
           <choose>
            <when test="userNum ==0 and listType ==100 and listType !=200">
            	     ORDER BY p.prodNum desc
						) A
				     )
           where RN BETWEEN #{start} AND #{end}
            </when>
           
           <when test="userNum !=0  and listType ==100 and listType !=200 ">
           	     ORDER BY p.prodNum desc
						) A
				     )
            B left OUTER JOIN (select DISTINCT prodnum , usernum
                                          from prodlike
                                        where usernum= #{userNum}) li on B.prodnum=li.prodnum 
       where B.rn BETWEEN #{start} AND #{end}
           </when>   
   
   
           <when test="userNum ==0 and listType ==200 and sorting=='defualt'">
               and (p.name like trim('%'||#{searchContent}||'%') or p.content like  trim('%'||#{searchContent}||'%'))
               ORDER BY p.prodNum desc
						) A
				     )
          where RN BETWEEN #{start} AND #{end}
           
           </when>
         
           <when test="userNum !=0 and listType ==200 and sorting=='defualt'  " >
           	      and (p.name like trim('%'||#{searchContent}||'%') or p.content like  trim('%'||#{searchContent}||'%'))
               ORDER BY p.prodNum desc
						) A
				     )
           B left OUTER JOIN (select DISTINCT prodnum , usernum
                                          from prodlike
                                        where usernum= #{userNum}) li on B.prodnum=li.prodnum 
       where B.rn BETWEEN #{start} AND #{end}
       
           </when>
            
            
            
          <when test="userNum ==0 and listType ==200 and sorting=='heightPrice'">
          	      and (p.name like trim('%'||#{searchContent}||'%') or p.content like  trim('%'||#{searchContent}||'%'))
               ORDER BY sortPrice desc
						) A
				     )
          where RN BETWEEN #{start} AND #{end}
          
           </when>
            
           <when test="userNum !=0 and listType ==200 and sorting=='heightPrice'" >
          	      and (p.name like trim('%'||#{searchContent}||'%') or p.content like  trim('%'||#{searchContent}||'%'))
                  ORDER BY sortPrice desc
						) A
				     )
           B left OUTER JOIN (select DISTINCT prodnum , usernum
                                          from prodlike
                                        where usernum= #{userNum}) li on B.prodnum=li.prodnum 
       where B.rn BETWEEN #{start} AND #{end}
         order by B.sortPrice desc
           </when>
            
            
            
            <when test="userNum ==0 and listType ==200 and sorting=='lowPrice'">
          	      and (p.name like trim('%'||#{searchContent}||'%') or p.content like  trim('%'||#{searchContent}||'%'))
               ORDER BY sortPrice asc
						) A
				     )
          where RN BETWEEN #{start} AND #{end}
          
          
           </when>
            
           <when test="userNum !=0 and listType ==200 and sorting=='lowPrice'" >
       	      and (p.name like trim('%'||#{searchContent}||'%') or p.content like  trim('%'||#{searchContent}||'%'))
               ORDER BY sortPrice asc
						) A
				     )
           B left OUTER JOIN (select DISTINCT prodnum , usernum
                                          from prodlike
                                        where usernum= #{userNum}) li on B.prodnum=li.prodnum 
       where B.rn BETWEEN #{start} AND #{end}
       order by B.sortPrice asc
           </when>
           
           <when test="userNum ==0 and listType !=200 and listType !=100" >
                        and p.prodcategorynum =#{listType}
                         ORDER BY p.prodNum desc
						) A
				     )
             where RN BETWEEN #{start} AND #{end}
           
           </when>
           
           <when test="userNum !=0 and listType !=200 and listType !=100" >
                        and p.prodcategorynum =#{listType}
                         ORDER BY p.prodNum desc
						) A
				     )
				     B left OUTER JOIN (select DISTINCT prodnum , usernum
                                          from prodlike
                                        where usernum= #{userNum}) li on B.prodnum=li.prodnum 
       where B.rn BETWEEN #{start} AND #{end}
        
           
           </when>
            
      
           
           </choose>
       </select>
       
       
         <!-- 최신글 5개 -->
       <select id="lastItems" resultType="map" parameterType="java.util.Map">
          <![CDATA[
                SELECT *
		       FROM (
			       SELECT ROWNUM RN, A.* 
				     FROM (
		   SELECT distinct p.PRODNUM, p.PRODCATEGORYNUM,p.NAME,p.PRICE,p.CONTENT ,p.TYPE,p.CREATEDAT,p.UPDATEDAT,io.content as image
						FROM products p,prodPhoto io,prodoption op
                        where p.prodnum=io.prodnum
                        and p.prodnum=op.prodnum
                        and io.pphotonum=1
                        and p.type not in(3,4)
                        and op.prodstatus=1
						ORDER BY p.createdat desc
						) A
				     )
			]]>
			
			<choose>
			  <when test="userNum==0">
               where RN BETWEEN 1 AND 8
			  </when>
			  
			  <when test="userNum !=0">
			  B left OUTER JOIN (select DISTINCT prodnum , usernum
                                          from prodlike
                                        where usernum=  #{userNum} ) li on B.prodnum=li.prodnum
                where b.rn between 1 and 8
			  </when>
			
			</choose>
       </select>
       
               <!-- 즉시구매 페이지 상품 정보 -->
        <select id="selectProductInfo" resultType="map" parameterType="java.util.Map">
         <![CDATA[
                         SELECT p.PRODNUM, p.PCATEGORYNUM,p.NAME,p.PRICE,p.QUANTITY
                        ,p.TYPE,p.CREATEDAT,p.UPDATEDAT,io.content as image  
						FROM products p,prodPhoto io
                        where p.prodnum=io.prodnum
                        and io.pphotonum=1
                        and p.prodnum= #{prodNum}
           ]]>
       </select>
       
       
       
        <!-- 페이징 처리 후 게시글 조회                     검색 결과          -->
       <select id="searchResult" resultType="map" parameterType="java.util.Map">
         <![CDATA[
       SELECT *
		       FROM (
			       SELECT ROWNUM RN, A.* 
				     FROM (
					   SELECT p.PRODNUM, p.PRODCATEGORYNUM,trim(p.NAME) as name,p.PRICE,trim(p.CONTENT) as content,a.PARENTCATEGORYNUM
                        ,p.TYPE,p.CREATEDAT,p.UPDATEDAT,io.content as image  
						FROM (select *
                               from prodcategory
                               start with PARENTCATEGORYNUM is null
                               connect by prior PRODCATEGORYNUM=PARENTCATEGORYNUM
                               )a, products p,prodPhoto io
                        where p.prodnum=io.prodnum
                        and a.PRODCATEGORYNUM =p.PRODCATEGORYNUM
                        and io.pphotonum=1
                        and p.type not in(3,4)
						ORDER BY p.CREATEDAT desc
						) A
				     )

           ]]>
           <choose>
               <when test="searchContent!=null and searchContent!=''">
               where rn between #{start} and #{end}
               and content like  trim('%'||#{searchContent}||'%') or name like trim('%'||#{searchContent}||'%')
               </when>
               <otherwise>
                where rn between #{start} and #{end}
               </otherwise>
           
           </choose>
          <!-- <choose>
            <when test="search ==10 and searchType=='content' and searchContent != null">
                    start with PARENTCATEGORYNUM is null
                               connect by prior PRODCATEGORYNUM=PARENTCATEGORYNUM
                               )a, products p,prodPhoto io
                        where p.prodnum=io.prodnum
                        and a.PRODCATEGORYNUM =p.PRODCATEGORYNUM
                        and io.pphotonum=1
                        and p.type not in(3,4)
						ORDER BY p.CREATEDAT desc
						) A
				     )
           where rn between #{start} and #{end}
            and content like  '%'||#{searchContent}||'%'
            </when>
            
                     <when test="search ==10 and searchType=='name' and searchContent != null">
                    start with PARENTCATEGORYNUM is null
                               connect by prior PRODCATEGORYNUM=PARENTCATEGORYNUM
                               )a, products p,prodPhoto io
                        where p.prodnum=io.prodnum
                        and a.PRODCATEGORYNUM =p.PRODCATEGORYNUM
                        and io.pphotonum=1
                        and p.type not in(3,4)
						ORDER BY p.CREATEDAT desc
						) A
				     )
           where rn between #{start} and #{end}
            and name like  '%'||#{searchContent}||'%'
            </when>
            
            <when test="search ==1 and searchType=='content' and searchContent != null">
                    start with PARENTCATEGORYNUM = #{search}
                               connect by prior PRODCATEGORYNUM=PARENTCATEGORYNUM
                               )a, products p,prodPhoto io
                        where p.prodnum=io.prodnum
                        and a.PRODCATEGORYNUM =p.PRODCATEGORYNUM
                        and io.pphotonum=1
                        and p.type not in(3,4)
						ORDER BY p.CREATEDAT desc
						) A
				     )
           where rn between #{start} and #{end}
            and content like  '%'||#{searchContent}||'%'
            </when>
            
                       <when test="search ==2 and searchType=='content' and searchContent != null">
                    start with PARENTCATEGORYNUM = #{search}
                               connect by prior PRODCATEGORYNUM=PARENTCATEGORYNUM
                               )a, products p,prodPhoto io
                        where p.prodnum=io.prodnum
                        and a.PRODCATEGORYNUM =p.PRODCATEGORYNUM
                        and io.pphotonum=1
                        and p.type not in(3,4)
						ORDER BY p.CREATEDAT desc
						) A
				     )
           where rn between #{start} and #{end}
            and content like  '%'||#{searchContent}||'%'
            </when>
            
                       <when test="search ==3 and searchType=='content' and searchContent != null">
                    start with PARENTCATEGORYNUM = #{search}
                               connect by prior PRODCATEGORYNUM=PARENTCATEGORYNUM
                               )a, products p,prodPhoto io
                        where p.prodnum=io.prodnum
                        and a.PRODCATEGORYNUM =p.PRODCATEGORYNUM
                        and io.pphotonum=1
                        and p.type not in(3,4)
						ORDER BY p.CREATEDAT desc
						) A
				     )
           where rn between #{start} and #{end}
            and content like  '%'||#{searchContent}||'%'
            </when>
            
                        
                       <when test="search ==3 and searchType=='name' and searchContent != null">
                    start with PARENTCATEGORYNUM = #{search}
                               connect by prior PRODCATEGORYNUM=PARENTCATEGORYNUM
                               )a, products p,prodPhoto io
                        where p.prodnum=io.prodnum
                        and a.PRODCATEGORYNUM =p.PRODCATEGORYNUM
                        and io.pphotonum=1
                        and p.type not in(3,4)
						ORDER BY p.CREATEDAT desc
						) A
				     )
           where rn between #{start} and #{end}
            and name like  '%'||#{searchContent}||'%'
            </when>
            
             <when test="search ==2 and searchType=='name' and searchContent != null">
                    start with PARENTCATEGORYNUM = #{search}
                               connect by prior PRODCATEGORYNUM=PARENTCATEGORYNUM
                               )a, products p,prodPhoto io
                        where p.prodnum=io.prodnum
                        and a.PRODCATEGORYNUM =p.PRODCATEGORYNUM
                        and io.pphotonum=1
                        and p.type not in(3,4)
						ORDER BY p.CREATEDAT desc
						) A
				     )
           where rn between #{start} and #{end}
            and name like  '%'||#{searchContent}||'%'
            </when>
            
             <when test="search ==1 and searchType=='name' and searchContent != null">
                    start with PARENTCATEGORYNUM = #{search}
                               connect by prior PRODCATEGORYNUM=PARENTCATEGORYNUM
                               )a, products p,prodPhoto io
                        where p.prodnum=io.prodnum
                        and a.PRODCATEGORYNUM =p.PRODCATEGORYNUM
                        and io.pphotonum=1
                        and p.type not in(3,4)
						ORDER BY p.CREATEDAT desc
						) A
				     )
           where rn between #{start} and #{end}
            and name like  '%'||#{searchContent}||'%'
            </when>
          </choose>   -->       
       </select>
       
       
         <!-- 관심상품 추가 -->
        <insert id="addProdLike"  parameterType="java.util.Map">
        <selectKey resultType="int" keyProperty="likeNum" order="BEFORE">
	    	 select seq_prodLike.nextval from dual
	    </selectKey>
        <![CDATA[
      insert into prodlike(LIKENUM,USERNUM,PRODNUM,PICKDATE)
      values(#{likeNum},#{userNum},#{prodNum},sysdate)
          ]]>
       </insert> 
       
       
       
             <!-- 기본배송지 추가 -->
        <insert id="addDelivery"  parameterType="java.util.Map">
        <selectKey resultType="int" keyProperty="deliNum" order="BEFORE">
	    	 select deliNum_SEQ.nextval from dual
	    </selectKey>
        <![CDATA[
      insert into delivery(DELINUM,USERNUM,ADDRESS,ADDRESS2,CREATEDAT,DELIBASIC,ZONECODE,CUSTNAME,CUSTPHONE)
      values(#{deliNum},#{userNum},#{address1},#{address2},sysdate,1,#{post},#{userName},#{phonNum})
          ]]>
       </insert> 
       
       
    <!-- 페이징 처리 후 게시글 이미지 조회       -->   
         <select id="shopMainImage" resultMap="e_P002_D003PhotoVO" parameterType="java.util.Map">
            <![CDATA[
	          SELECT content
		       FROM (
			       SELECT ROWNUM RN, A.* 
				     FROM (
						SELECT * 
						FROM prodphoto 
						ORDER BY prodNum desc 
						) A
				    )
           ]]>
           <where>
           RN BETWEEN #{start} AND #{end}
           <if test="listType!=10">
          AND pcategorynum = #{listType}
           </if>
           </where>
        </select>
        
        
        
        <select id="seachOptionNum" resultType="int" parameterType="java.util.Map">
	       select optionnum
           from prodoption
           where PRODNUM = #{prodNum}
       </select>
        
        
        
            <!-- 장바구니 페이징 -->   
         <select id="UserCartList" resultType="map" parameterType="java.util.Map">
        <![CDATA[
      SELECT *
		FROM (
			SELECT ROWNUM RN, A.* 
				FROM (
                              select o.ordernum,o.prodnum,o.optionnum,p.name, o.price,o.quantity,op.color,op.prodsize,po.content as image
                                from orders o, products p, prodphoto po,prodoption op
                                where o.prodnum=p.prodnum
                                and p.prodnum=po.prodnum
                                and op.optionnum =o.optionnum
                                and o.usernum= #{userNum}
                                and  o.ordertype= #{orderType}
                                and po.pphotonum=1
                                ORDER BY o.ordereDat desc 
						) A
				)
	  WHERE RN BETWEEN #{start} AND #{end}
        ]]>
        </select>
        
        
        
        
         
        <select id="totaladdUsed" resultType="int" parameterType="java.util.Map">
        <![CDATA[
	  SELECT count(*)
		FROM (
			SELECT ROWNUM RN, A.* 
				FROM (
                    select p.PRODNUM, p.NAME, p.PRICE, p.CONTENT, p.TYPE, to_char(p.CREATEDAT,'yyyy-mm-dd') as createdat, 
                    p.UPDATEDAT, p.USERNUM, p.PRODCATEGORYNUM ,p.REQUIRECOMMENT,
                  po.CONTENT as image
                  from products p, prodphoto po
                  where  p.prodnum=po.prodnum
                   and p.usernum= #{userNum}
				      ]]>
				        <if test="listType==100">
				        and p.type not in (1,2)
                   and po.pphotonum=1
                 ORDER BY p.prodnum desc 
						) A
				)
				        </if>
				        <if test="listType==1">
				and p.type not in (1,2)
                   and po.pphotonum=1
                 ORDER BY p.prodnum desc 
						) A
				)
				         where createdat between sysdate-7 and sysdate
				        </if>
				        <if test="listType==15">
				 and p.type not in (1,2)
                   and po.pphotonum=1
                 ORDER BY p.prodnum desc 
						) A
				)
				         where createdat between sysdate-15 and sysdate
				        </if>
				        <if test="listType==30">
				    and p.type not in (1,2)
                   and po.pphotonum=1
                 ORDER BY p.prodnum desc 
						) A
				)
				        where  createdat between sysdate-30 and sysdate
				        </if>
				        <if test="listType==200">
				      and p.type =#{listType2}
                   and po.pphotonum=1
                 ORDER BY p.prodnum desc 
						) A
				)
				         where createdat BETWEEN to_date(#{startD},'yyyy-mm-dd hh') and to_date(#{endD},'yyyy-mm-dd')+1
				        </if>
       </select>
        
            <!-- 중고품 신청 내역 페이징 -->   
         <select id="selectMyUsedList" resultType="map" parameterType="java.util.Map">
        <![CDATA[
      SELECT *
		FROM (
			SELECT ROWNUM RN, A.* 
				FROM (
                    select p.PRODNUM, p.NAME, p.PRICE, p.CONTENT, p.TYPE, to_char(p.CREATEDAT,'yyyy-mm-dd') as createdat,
                     p.UPDATEDAT, p.USERNUM, p.PRODCATEGORYNUM ,p.REQUIRECOMMENT,
                     po.CONTENT as image , u.id
                    from products p, prodphoto po ,users u
                  where  p.prodnum=po.prodnum
                  and u.usernum=p.usernum
                   and p.usernum= #{userNum}
        ]]>
           <if test="listType==1">
           and p.type not in (1,2)
                   and po.pphotonum=1
                 ORDER BY p.prodnum desc 
						) A
				)
	  WHERE RN BETWEEN #{start} AND #{end}
           and createdat between sysdate-7 and sysdate
           </if>
           <if test="listType==15">
           and p.type not in (1,2)
                   and po.pphotonum=1
                 ORDER BY p.prodnum desc 
						) A
				)
	  WHERE RN BETWEEN #{start} AND #{end}
           and createdat between sysdate-15 and sysdate
           </if>
           <if test="listType==30">
           and p.type not in (1,2)
                   and po.pphotonum=1
                 ORDER BY p.prodnum desc 
						) A
				)
	  WHERE RN BETWEEN #{start} AND #{end}
           and createdat between sysdate-30 and sysdate
           </if>
           <if test="listType==200">
           and p.type =#{listType2}
                   and po.pphotonum=1
                 ORDER BY p.prodnum desc 
						) A
				)
	  WHERE RN BETWEEN #{start} AND #{end}
           and createdat BETWEEN to_date(#{startD},'yyyy-mm-dd hh') and to_date(#{endD},'yyyy-mm-dd')+1
           
           </if>
           <if test="listType==100">
           and p.type not in (1,2)
                   and po.pphotonum=1
                 ORDER BY p.prodnum desc 
						) A
				)
	  WHERE RN BETWEEN #{start} AND #{end}
           </if>
           
      
        </select>
        
        
        
        
             <!-- 구매내역 페이징 -->   
         <select id="paymentList" resultType="map" parameterType="java.util.Map">
        <![CDATA[
  SELECT Rn,createdat,buyername,count,imp_uid,merchant_uid,type,apply_num,name,totalPrice,
         used,delivery,orderStatus,deliveryStatus,ordernum,to_char(createdat,'yyyy-mm-dd')as createdat2
		FROM (
			SELECT ROWNUM RN, A.*                                    
				FROM (
                           select pay.createdat, min(pay.buyername) as buyername,count(pay.ordernum) as count,
                min(pay.imp_uid) as imp_uid, min(pay.merchant_uid) as merchant_uid,min(pay.ordernum)as ordernum,
                min(pay.type) as type ,min(pay.apply_num) as apply_num ,min(p.name) as name,
                sum(o.payTotal) as totalPrice ,min(used) as used,min(o.deliverytype) as delivery,min(o.orderStatus) as orderStatus,
                min(o.deliveryStatus)as deliveryStatus
                
                from payment pay, orders o,products p,point poin
                where pay.ordernum =o.ordernum
                and p.prodnum=o.prodnum
                and poin.ordernum=pay.ordernum
                and o.usernum=#{userNum}
                 and o.ordertype=4
                 
                 
         
        ]]>
        
          <if test= "listType == 100 ">
                    group by pay.createdat
                 order by pay.createdat desc
						) A
				)
	  WHERE RN BETWEEN #{start} AND #{end}
          and createdat BETWEEN sysdate-3 and sysdate
         </if>
         
        <if test= "listType != null and listType == 0">
                  group by pay.createdat
                 order by pay.createdat desc
						) A
				)
	  WHERE RN BETWEEN #{start} AND #{end}
         and createdat BETWEEN sysdate-1 and sysdate
         </if>
         
         <if test= "listType != null and listType == 1">
                   group by pay.createdat
                 order by pay.createdat desc
						) A
				)
	  WHERE RN BETWEEN #{start} AND #{end}
         and createdat BETWEEN sysdate-7 and sysdate
         </if>
         
         <if test= "listType != null and listType == 15">
                   group by pay.createdat
                 order by pay.createdat desc
						) A
				)
	  WHERE RN BETWEEN #{start} AND #{end}
         and createdat BETWEEN sysdate-15 and sysdate
         </if>
         
          <if test= "listType != null and listType == 30">
                    group by pay.createdat
                 order by pay.createdat desc
						) A
				)
	  WHERE RN BETWEEN #{start} AND #{end}
         and createdat BETWEEN sysdate-30 and sysdate
         </if>
         
          <if test= "listType != null and listType == 200">
                   and o.deliverystatus =#{deliveryStatus}
                    group by pay.createdat
                 order by pay.createdat desc
						) A
				)
	  WHERE RN BETWEEN #{start} AND #{end}
         and createdat BETWEEN to_date(#{startD},'yyyy-mm-dd hh') and to_date(#{endD},'yyyy-mm-dd')+1
         </if>
         
        </select>
        
        
        
        
        
              <select id="payDetailList" resultType="map" parameterType="java.util.Map">
        <![CDATA[
      select pay.ordernum,o.usernum,o.prodnum,o.optionnum,o.quantity,o.price,o.orderstatus,o.deliverystatus,
      p.name,p.type ,po.content,
      d.address,d.address2,d.custname,d.custphone,d.delinum,d.zonecode,
      op.color,op.prodsize
      
       from payment pay,orders o,products p,prodphoto po ,
           delivery d,point poin ,prodoption op
      where pay.ordernum=o.ordernum
      and o.prodnum=p.prodnum
      and p.prodnum=po.prodnum
      and pay.ordernum = poin.ordernum
      and d.usernum = poin.usernum
       and o.optionnum= op.optionnum
       
      and po.pphotonum=1
      and o.ordertype=4
      
      and o.usernum=#{userNum}
      and d.delibasic =#{delivery}
      and pay.createdat =#{createDat}
        ]]>
        </select>
        
         <select id="totalPaymentListCount" resultType="int" parameterType="java.util.Map">
        <![CDATA[
     SELECT count(*)
		FROM (
                select pay.createdat, min(pay.buyername),count(pay.ordernum),min(pay.imp_uid),min(pay.merchant_uid),
                min(pay.ordernum),min(pay.type),min(pay.apply_num),min(p.name),sum(o.price),min(used)
                from payment pay, orders o,products p,point poin
               where pay.ordernum =o.ordernum
               and p.prodnum=o.prodnum
                and poin.ordernum=pay.ordernum
                and o.usernum=#{userNum}
                and o.ordertype=4
                
        ]]>
         <if test="listType!= null and listType==100">
                 and pay.createdat between sysdate-3 and sysdate
                 group by pay.createdat
				)
         </if>
             <if test="listType!= null and listType==0">
                 and pay.createdat between sysdate-1 and sysdate
                 group by pay.createdat
				)
           </if>
              <if test="listType!= null and listType==1">
                 and pay.createdat between sysdate-7 and sysdate
                 group by pay.createdat
				)  
           </if>
           
             <if test="listType!= null and listType==15">
                 and pay.createdat between sysdate-15 and sysdate
                 group by pay.createdat
				)
           </if>
           
             <if test="listType!= null and listType==30">
                 and pay.createdat between sysdate-30 and sysdate
                 group by pay.createdat
				)
           </if>
        
            <if test="listType!= null and listType==200">
                 and o.deliverystatus = #{deliveryStatus}
                 and pay.createdat between #{startD} and #{endD}
                 group by pay.createdat
				)
           </if>
           
            <if test="listType == null ">
                 group by pay.createdat
				)
         </if>
        
        </select>
        
        
        
               	<!--중고메인이미지 -->
       <select id="myMainImage" resultType="map" parameterType="java.util.Map">
        <![CDATA[
	      select content as mainImage
          from prodphoto
          where prodnum= #{prodNum}
          and content is not null
	       ]]>
       </select>
       <!--중고디테일이미지 -->
       <select id="myDetailImage" resultType="map" parameterType="java.util.Map">
        <![CDATA[
	      select contentdetail as detailImage
          from prodphoto
          where prodnum= #{prodNum}
          and contentdetail is not null
	       ]]>
       </select>
       <!--중고 디테일 -->
       <select id="myProdDetail" resultType="map" parameterType="java.util.Map">
        <![CDATA[
	      select PRODNUM,PRODCATEGORYNUM,NAME,PRICE,CONTENT,TYPe,
	      to_char(CREATEDAT,'yyyy-mm-dd')as createdat,USERNUM,REQUIRECOMMENT,CNTCOUNT
           from products
         where prodnum= #{prodNum}
	       ]]>
       </select>
       
                 	<!--중고 메인 -->
       <select id="CartCount" resultType="int" parameterType="java.util.Map">
        <![CDATA[
	      SELECT COUNT(*) FROM orders
            where userNum = #{userNum}
            and orderType = #{orderType}
	       ]]>
       </select>
       
            <!--구매전 선택된 장바구니 총개수 -->
       <select id="selectCartCount" resultType="int" parameterType="java.util.Map">
        <![CDATA[
	      SELECT COUNT(*) FROM orders
            where userNum = #{userNum}
            and orderType =3
	       ]]>
       </select>
       
        <!-- 구매전 장바구니 페이징   사용안함-->   
         <select id="selectCartList" resultType="map" parameterType="java.util.Map">
        <![CDATA[
      SELECT *
		FROM (
			SELECT ROWNUM RN, A.* 
				FROM (
				        SELECT o.ORDERNUM,o.USERNUM,o.ORDEREDAT,o.PRICE,o.CHARGE,o.ORDERSTATUS,
                        o.DELIVERYSTATUS,o.ORDERTYPE,o.PRODNUM,o.QUANTITY,o.PRODNAME,io.content as image
						FROM orders o,prodPhoto io, products p
                        where o.prodnum= io.prodnum
                        and io.prodnum=p.prodnum
                        and o.userNum = #{userNum}
                        and o.ordertype=3
                        and io.pphotonum=1
						ORDER BY o.ordereDat asc       
						) A
				)
	  WHERE RN BETWEEN #{start} AND #{end}
        ]]>
        </select>
       
       
       
               <!-- 위시리스트 -->   
         <select id="selectWishList" resultType="map" parameterType="java.util.Map">
        <![CDATA[
	 	        SELECT *
		FROM (
			SELECT ROWNUM RN, C.* 
				FROM (
                          select B.*,op.optionnum
                          from (select A.*,af.value, af.totalcount
                                 from (select  pl.prodnum,pl.usernum,pl.LIKENUM,to_char(pl.PICKDATE,'yyyy-mm-dd')as pickdate,pl.PRODCOMMENT
                                ,p.name,po.content as image,p.price
                                 from prodlike pl,products p,prodphoto po
                                  where  pl.prodnum=p.prodnum
                                  and p.prodnum=po.prodnum
                                  and po.pphotonum=1
                                  and pl.usernum = #{userNum}
                                 ORDER BY pl.pickdate desc   
                                                       ) A left outer join (  select prodnum, round(avg(evalue),1) as value,count(*) as totalcount
                                                                              from productafter
                                                                              where aftertype is null
                                                                              group by prodnum) af on A.prodnum=af.prodnum) B left outer join (
                                                                                           select prodnum, min(optionnum) as optionnum
                                                                                           from prodoption
                                                                                           group by prodnum     
                                                                                                 ) op on B.prodnum=op.prodnum  
						) C
				)
	 WHERE RN BETWEEN #{start} AND #{end}
	 order by pickdate desc
        ]]> 
        </select>
       
       
           <!-- 장바구니 삭제 -->
       <delete id="deleteCart" parameterType="java.util.Map">
	  delete from orders
	  where orderNum = #{orderNum}
	  and userNum = #{userNum}
	  and orderType=2
	   </delete>
	   
	   
	   <!-- 위시리스트 취소 -->
       <delete id="delwish" parameterType="java.util.Map">
	  delete from prodlike
	  where prodNum = #{prodNum}
	  and userNum = #{userNum}
	   </delete>
	   
	   <!-- 위시리스트 추가 -->
	   <insert id="addwish" parameterType="java.util.Map">
	    <selectKey resultType="int" keyProperty="likeNum" order="BEFORE">
	    	 select seq_prodLike.nextval from dual
	    </selectKey>
        <![CDATA[
      insert into prodlike(LIKENUM,USERNUM,PRODNUM,PICKDATE)
      values(#{likeNum},#{userNum},#{prodNum},sysdate)
          ]]>
	   </insert>
	   
	    <!-- 장바구니 구매페이지 이동 전 테이블 수정 -->
	   <update id="modifyBeforeBuy"  parameterType="java.util.List">
        <foreach  item="item" collection="list"  index="index" 
      separator=";" open="DECLARE BEGIN" close="; END;" >
           UPDATE orders 
           SET PRICE = #{item.price}
           ,ORDERTYPE =3
           ,QUANTITY = #{item.quantity}
           ,ORDERSTATUS =1
           ,DELIVERYSTATUS =100
           ,ORDEREDAT =sysdate
           WHERE USERNUM= #{item.userNum}
           AND ORDERNUM= #{item.orderNum}
      </foreach>
       </update>
        
        
        
          <!-- 결제취소 요청 -->
	   <update id="applycancelPay"  parameterType="java.util.Map">
      update payment
     set type='cancel',
      reason=#{reason},
      updatedat=sysdate
      where imp_uid=#{imp_uid}

       </update>
        
	    <!--위시리스트->장바구니 후 위시리스트 내용 삭제-->
	   <delete id="deleteWish"  parameterType="java.util.List">
        <foreach  item="item" collection="list"  index="index" 
      separator=";" open="DECLARE BEGIN" close="; END;" >
           DELETE from prodlike
           WHERE likenum= #{item.likeNum}
      </foreach>
       </delete>
        
        <delete id="delAfter"  parameterType="java.util.Map">
           DELETE from productafter
           WHERE afternum= #{afterNum}
       </delete>
        
        <delete id="delComment"  parameterType="java.util.Map">
           DELETE from productafter
           WHERE afternum= #{afterNum}
       </delete>
        
           <!--위시리스트 삭제-->
	   <delete id="deleteWishOne"  parameterType="java.util.Map">
           DELETE from prodlike
           WHERE likenum= #{likeNum}
       </delete>
        
        
        
            <!-- 장바구니 결제 -->
        <update id="insertOrders"  parameterType="java.util.List">
        <foreach  item="item" collection="list"  index="index" 
      separator=";" open="DECLARE BEGIN" close="; END;" >
           UPDATE orders 
           SET PAYTOTAL = #{item.payTotal}
           ,ORDERTYPE =4
           ,QUANTITY = #{item.quantity}
           ,ORDERSTATUS =2
           ,DELIVERYSTATUS =200
           ,ORDEREDAT =sysdate
           ,prodname =#{item.prodName}
           ,DELIVERYTYPE = #{item.deliveryType}
           WHERE USERNUM= #{item.userNum}
           AND ORDERNUM= #{item.orderNum}
      </foreach>
       </update>


               <!-- 즉시구매 -->
        <insert id="insertOrderOne"  parameterType="java.util.List">
        <foreach  item="item" collection="list"  index="index" 
      separator=";" open="DECLARE BEGIN" close="; END;">
      insert into orders(ORDERNUM, USERNUM,ORDEREDAT,PRICE,PAYTOTAL,CHARGE,ORDERSTATUS,DELIVERYSTATUS,ORDERTYPE,OPTIONNUM,PRODNUM,PRODNAME,QUANTITY,DELIVERYTYPE)
      values(#{item.orderNum},#{item.userNum},SYSDATE,#{item.price},
      #{item.payTotal},3000,2,200,4,#{item.optionNum},#{item.prodNum},#{item.prodName},#{item.quantity},#{item.deliveryType})
      </foreach>
       </insert> 
       
        <!-- 즉시구매 -->
	<!--   <insert id="insertOrderOne" parameterType="java.util.List">
	   insert into orders(
	ORDERNUM, USERNUM,ORDEREDAT,PRICE,PAYTOTAL,CHARGE,ORDERSTATUS,DELIVERYSTATUS,ORDERTYPE,OPTIONNUM,PRODNUM,PRODNAME,QUANTITY
				    )
		        select  seq_orders.nextval as ORDERNUM, A .* from(
	 	<foreach collection="list" item="item" separator="union all" >
		        select  
				        #{item.userNum} as USERNUM,
				        sysdate as ORDEREDAT,
				        #{item.price} as PRICE,
				        #{item.payTotal} as PAYTOTAL, 
				        3000 as CHARGE, 
				        2 as ORDERSTATUS,
				        200 as DELIVERYSTATUS,
				        4 as ORDERTYPE,   
				        #{item.optionNum} as OPTIONNUM,
				        #{item.prodNum} as PRODNUM,
				        #{item.prodName} as PRODNAME,
				        #{item.quantity} as QUANTITY
				        from dual
   		 </foreach>)A
    </insert> -->
    
    
    
	 
	      <!-- orders (ordertype 일반구매 = 1, 장바구니 =2, 구매전장바구니 =3)
	                  (oderstatus 결제완료 =1, 미완료 =2)                               
	                  (deliverystatus 배송준비 =1, 배송중 =2, 배송완료=3)
	                  등록 -->
	              <!--     
 <insert id="insertOrders22222222222" parameterType="java.util.List"   >
		<selectKey resultType="int" keyProperty="orderNum" order="BEFORE">
	    	 select seq_orders.nextval from dual
	    </selectKey>
	    <![CDATA[
		   insert into orders(
		                ORDERNUM, 
		                USERNUM,
                    CARTNUM,
                    ORDEREDAT,
                    PRICE,
					CHARGE,
					ORDERSTATUS,
					DELIVERYSTATUS,
					ORDERTYPE,
					PRODNUM,
					PRODNAME,
					QUANTITY
				    )
					  			values(
					  			      #{orderNum},
					  			      #{userNum},
					  			      #{orderNum},
					  			      SYSDATE,
					  			      #{price},
					  			      3000,
					  			      1,
					  			      1,
					  			      1,
					  			      #{prodNum},
					  			      #{prodName},
					  			      #{quantity})
		]]>
	</insert> 
	 -->
	       <!-- 장바구니 추가 -->
	       <!-- orders (ordertype 일반구매 = 1, 장바구니 =2)
	                  (oderstatus 결제완료 =1, 미완료 =2)                               
	                  (deliverystatus 배송준비 =1,배송대기=2, 배송중 =3, 배송완료=4)
	                  등록 -->
	<!-- <insert id="addCart" parameterType="java.util.Map"   >
		<selectKey resultType="int" keyProperty="orderNum" order="BEFORE">
	    	 select seq_orders.nextval from dual
	    </selectKey>
	    <![CDATA[
		   insert into orders(
		                ORDERNUM, 
		                USERNUM,
                    ORDEREDAT,
                    PRICE,
					CHARGE,
					ORDERSTATUS,
					DELIVERYSTATUS,
					ORDERTYPE,
					PRODNUM,
					PRODNAME,
					QUANTITY
				    )
					  			
		]]>
		<choose>
		  <when test="type=='main'">
		  values(#{orderNum},#{userNum},SYSDATE,#{prodPrice},3000,1,100,2,#{prodNum},#{prodName},0)
		  </when>
		  <when test="type=='detail'">
		  values(#{orderNum},#{userNum},SYSDATE,#{prodPrice},3000,1,100,2,#{prodNum},#{prodName},#{quantity})
		  </when>
		</choose>
	</insert>  -->
	
	
	  <insert id="addCart" parameterType="java.util.List">
	   insert into orders(
		                ORDERNUM, 
		                USERNUM,
		                PRICE,
		                OPTIONNUM,
                    ORDEREDAT,
					CHARGE,
					ORDERSTATUS,
					DELIVERYSTATUS,
					ORDERTYPE,
					PRODNUM,
					QUANTITY
				    )
		        select  orders_seq.nextval as ORDERNUM, A .* from(
	 	<foreach collection="list" item="item" separator="union all" >
		        select  
				        #{item.userNum} as USERNUM,
				        #{item.price} as PRICE, 
				        #{item.optionNum} as OPTIONNUM,
				        CURRENT_TIMESTAMP as ORDEREDAT, 
				        3000 as CHARGE,
				        1 as ORDERSTATUS,
				        100 as DELIVERYSTATUS,
				        #{item.orderType} as ORDERTYPE,
				        #{item.prodNum}as PRODNUM,
				        #{item.quantity}as QUANTITY
				        from dual
   		 </foreach>)A
    </insert>
	 
	 
	 
	<insert id="addCartOne"  parameterType="java.util.Map">
   		<selectKey resultType="int" keyProperty="orderNum" order="BEFORE">
	     select orders_seq.nextval from dual
	    </selectKey>
     insert INTO orders(  ORDERNUM, USERNUM,PRICE, OPTIONNUM,ORDEREDAT,CHARGE,ORDERSTATUS,DELIVERYSTATUS,ORDERTYPE,PRODNUM,QUANTITY)
      VALUES (#{orderNum}, #{userNum},#{prodPrice} ,#{optionNum} ,CURRENT_TIMESTAMP ,3000 ,1 ,100 ,#{orderType} ,#{prodNum},1)
   </insert>
	
	
	
	
	 
	     <!-- 장바구니결제 후 payment -->
<!-- 	<insert id="insertPaymentmultiple"  parameterType="java.util.Map">
	        <selectKey resultType="int" keyProperty="orderNum" order="BEFORE">
	    	 	select orderNum
            from orders
            where orderNum in (
               select max(orderNum)
               from orders
                  )
	    </selectKey>
    <foreach item="item"  collection="list"   open="INSERT ALL" 
                  separator=" " close="SELECT * FROM DUAL" >
       INTO payment(ORDERNUM,TYPE,CREATEDAT,BUYERNAME,MERCHANT_UID,IMP_UID,APPLY_NUM )
      
      <if test= "item.orderNum != null and item.orderNum == 0">
	   VALUES (#{orderNum},#{item.payType},sysdate,#{item.custName},#{item.merchant_uid},#{item.imp_uid},#{item.apply_num})
      </if>
      <if test= "item.orderNum != null and item.orderNum != 0">  장바구니
      VALUES (#{item.orderNum},#{item.payType},sysdate,#{item.custName},#{item.merchant_uid},#{item.imp_uid},#{item.apply_num})
      </if>
    </foreach>
  </insert> -->
  
   <!-- 장바구니결제 후 payment -->
  <insert id="insertPaymentmultiple"  parameterType="java.util.Map">
    <foreach item="item"  collection="list"   open="INSERT ALL" 
                  separator=" " close="SELECT * FROM DUAL" >
       INTO payment(ORDERNUM,TYPE,CREATEDAT,BUYERNAME,MERCHANT_UID,IMP_UID,APPLY_NUM )
      VALUES (#{item.orderNum},#{item.payType},sysdate,#{item.custName},#{item.merchant_uid},#{item.imp_uid},#{item.apply_num})
    </foreach>
  </insert>
	
	<insert id="insertPayment" parameterType="java.util.Map"   >
		<selectKey resultType="int" keyProperty="orderNum" order="BEFORE">
	    	 	select orderNum
            from orders
            where orderNum in (
               select max(orderNum)
               from orders
                  )
	    </selectKey>
	    <![CDATA[
		   insert into payment(
		              ORDERNUM,
                       TYPE,
                       CREATEDAT,
                      BUYERNAME,
                      MERCHANT_UID,
                      IMP_UID,
                      APPLY_NUM 
				    )
					  			values(
					  			      #{orderNum},
					  			      #{payType},
					  			      sysdate,
					  			      #{custName},
					  			      #{merchant_uid},
					  			      #{imp_uid},
					  			      #{apply_num})
		]]>
	</insert> 
	
	
	<insert id="insertDelivery" parameterType="java.util.Map"   >
   		<selectKey resultType="int" keyProperty="deliNum" order="BEFORE">
         select deliNum_SEQ.nextval from dual
	    </selectKey>
	    <![CDATA[
		   insert into delivery(
		                 USERNUM,
		                DELINUM, 
                    ADDRESS,
                    CREATEDAT,
                    DELIBASIC,
                   ZONECODE,
                  ADDRESS2,
                  CUSTNAME,
                   CUSTPHONE
				    )
                values(#{userNum},#{deliNum},#{address1},sysdate,#{deliBasic},#{zoneCode},#{address2},#{custName},#{phoneNum})
		]]>
	</insert> 

	      <!-- 상품등록 -->
   <insert id="saveImage"  parameterType="java.util.Map">
   		<selectKey resultType="int" keyProperty="prodNum" order="BEFORE">
	    	select prodnum
            from products
            where CREATEDAT in (
               select max(CREATEDAT)
               from products
                  )
	    </selectKey>
    <foreach item="item"  collection="list"   open="INSERT ALL" 
                  separator=" " close="SELECT * FROM DUAL" >
      INTO prodphoto(PRODNUM,PPHOTONUM,CONTENT,CREATEDAT)
      VALUES (#{prodNum}, #{item.pPhotoNum}, #{item.content}, sysdate)
    </foreach>
  </insert>
  
  	      <!-- 중고물품 신청 -->
   <insert id="saveUsedImage"  parameterType="java.util.List">
   		 <selectKey resultType="int" keyProperty="prodNum" order="BEFORE">
	    	select prodnum
            from products
            where CREATEDAT in (
               select max(CREATEDAT)
               from products
                  )
	    </selectKey>
    <foreach item="item"  collection="list"   open="INSERT ALL" 
                  separator=" " close="SELECT * FROM DUAL" >
      INTO prodphoto(PRODNUM,PPHOTONUM,CONTENT,ORIGINALFILENAME,CREATEDAT)
      VALUES (#{prodNum}, #{item.pphotoNum}, #{item.content},#{item.originalFileName}, sysdate)
    </foreach>
  </insert>
   
      <!--     상품 디테일사진
      <insert id="saveUsedDetailImage"  parameterType="java.util.List">
   		<selectKey resultType="int" keyProperty="prodNum" order="BEFORE">
	    	select prodnum
            from products
            where CREATEDAT in (
               select max(CREATEDAT)
               from products
                  )
	    </selectKey>
    <foreach item="item"  collection="list"   open="INSERT ALL" 
                  separator=" " close="SELECT * FROM DUAL" >
      INTO prodphoto(PRODNUM,PPHOTONUM,contentDetail,CREATEDAT)
      VALUES (#{prodNum}, #{item.pphotoNum}, #{item.contentDetail}, sysdate)
    </foreach>
  </insert> -->
  
           <!-- 상품 디테일사진 테스트 -->
    <insert id="saveUsedDetailImage"  parameterType="java.util.List">
    <selectKey resultType="int" keyProperty="prodNum" order="BEFORE">
	    	select prodnum
            from products
            where CREATEDAT in (
               select max(CREATEDAT)
               from products
                  )
	    </selectKey>
       <foreach item="item"  collection="list"   open="INSERT ALL" 
                  separator=" " close="SELECT * FROM DUAL" >
      INTO prodphoto(PRODNUM,PPHOTONUM,contentDetail,CREATEDAT)
      VALUES (#{prodNum}, #{item.pphotoNum}, #{item.contentDetail},sysdate)
    </foreach>
       </insert>
       
       
       
          <!-- delibasic -->  
        <select id="getDelibasic" resultType="int" parameterType="java.util.Map" >
        <![CDATA[
	    	select  max(delibasic) 
            from delivery
            where usernum = #{userNum}
        ]]>
        </select>
            <!-- delibasic 사이즈 -->  
        <select id="getDelibasicSize" resultType="map" parameterType="java.util.Map" >
        <![CDATA[
	    	select  * 
            from delivery
            where usernum = #{userNum}
        ]]>
        </select>
  
                  <!-- prodnum -->  
        <select id="prodnum" resultType="int" >
        <![CDATA[
	    	select prodnum
            from products
            where prodnum in (
               select max(prodnum)
               from products
                  )
        ]]>
        </select>
            <!-- optionnum dd -->  
        <select id="optionNum" resultType="int" >
        <![CDATA[
         select prodOption_seq.nextval from dual
         
        ]]>
        </select>
        
        
            <!-- optionnum dd -->  
        <select id="selectOrderNum" resultType="int" flushCache="true" useCache="false">
        <![CDATA[
         select orders_seq.nextval from dual
        ]]>
        </select>
  
              <!-- 옵션 등록  문제는 시퀀스가 한번밖에 돌지않아 2번재부터 에러발생-->
    <!-- <insert id="addOption"  parameterType="java.util.List">
       <foreach item="item"  collection="list"   open="INSERT ALL" 
                  separator=" " close="SELECT * FROM DUAL" >
      INTO prodoption(OPTIONNUM,PRODNUM,PRODSIZE,COLOR,QUANTITY,PRODSTATUS,UPDATEDATE)
      VALUES (#{item.optionNum},#{item.prodNum}, #{item.prodSize}, #{item.color},#{item.quantity},#{item.prodStatus},sysdate)
    </foreach>      
     </insert> -->
 
       <insert id="addOption" parameterType="java.util.List">
	 insert into prodoption (
	   			OPTIONNUM,
		        PRODNUM, 
		        PRODSIZE,
		        COLOR, 
		        QUANTITY,
		        PRODSTATUS,
		        UPDATEDATE
		         )
		        select  prodOption_seq.nextval as OPTIONNUM, A .* from(
	 	<foreach collection="list" item="item" separator="union all" >
		        select  
				        #{item.prodNum} as prodNum, 
				        #{item.prodSize}as prodSize, 
				        #{item.color}as color, 
				        #{item.quantity}as quantity, 
				        #{item.prodStatus}as prodStatus,
				        CURRENT_TIMESTAMP as UPDATEDATE
				        from dual
   		 </foreach>)A
    </insert>
    
    
  
     <insert id="addCartFromWish" parameterType="java.util.List">
	   insert into orders(
		                ORDERNUM, 
		                USERNUM,
		                PRICE,
		                OPTIONNUM,
                    ORDEREDAT,
					CHARGE,
					ORDERSTATUS,
					DELIVERYSTATUS,
					ORDERTYPE,
					PRODNUM,
					QUANTITY
				    )
		        select  orders_seq.nextval as ORDERNUM, A .* from(
	 	<foreach collection="list" item="item" separator="union all" >
		        select  
				        #{item.userNum} as USERNUM,
				        #{item.price} as PRICE, 
				        #{item.optionNum} as OPTIONNUM,
				        CURRENT_TIMESTAMP as ORDEREDAT, 
				        3000 as CHARGE,
				        1 as ORDERSTATUS,
				        100 as DELIVERYSTATUS,
				        3 as ORDERTYPE,
				        #{item.prodNum}as PRODNUM,
				        #{item.quantity}as QUANTITY
				        from dual
   		 </foreach>)A
    </insert>  
   
   
                <!-- 글목록 이미지 하나 -->  
        <select id="getByteImage" resultMap="e_P002_D003PhotoVO" parameterType="e_P002_D003PhotoVO">
        <![CDATA[
            SELECT content
            FROM prodphoto
            WHERE pphotoNum = 1 and prodNum = #{prodNum}
            ORDER BY prodNum
        ]]>
        </select>
        
                        <!-- 상품상세 이미지 하나 -->  
        <select id="detailImage" resultMap="productAfterVO" parameterType="productAfterVO">
        <![CDATA[
            SELECT photo
            FROM productafter
            WHERE afterNum = #{afterNum}
        ]]>
        </select>
        
          
     <select id="shopMainText" resultMap="e_P002_D003ProductsVO" parameterType="e_P002_D003ProductsVO">
        <![CDATA[
           select p.prodNum,p.name,p.price,p.content
          from products p inner join prodphoto i on p.prodnum =i.prodnum
          where i.pphotonum=1
          order by p.prodNum
        ]]>
        </select>


	          <!-- 상품 상세내용 등록 -->
	 <insert id="addProduct" parameterType="java.util.Map"   >
		<selectKey resultType="String" keyProperty="prodNum" order="BEFORE">
	    	select seq_prod_prodNum.nextval from dual
	    </selectKey>
	    <![CDATA[
		   insert into products(
		                prodNum, 
                    name,
                    price,
                    content,
					Quantity,
					type,
					createdAt
				    )
					  			values(
					  			      #{prodNum},
					  			      #{name},
					  			      #{price},
					  			      #{content},
					  			      #{type},
					  			      sysdate)
		]]>
	</insert> 
	
	
	          <!-- 중고 상세내용 등록 -->
	 <insert id="addUsedPro" parameterType="java.util.Map">
		<selectKey resultType="int" keyProperty="prodNum" order="BEFORE">
	    	select seq_prod_prodNum.nextval from dual
	    </selectKey>
	    <![CDATA[
		   insert into products(
		                prodNum, 
		                PRODCATEGORYNUM,
                    name,
                    price,
                    content,
					type,
					createdAt,
					userNum
				    )
					  			values(
					  			      #{prodNum},
					  			      #{parentCategoryNum},
					  			      #{name},
					  			      #{price},
					  			      #{content},
					  			      #{type},
					  			      sysdate,
					  			      #{userNum})
		]]>
	</insert>
	
	
	
          <!-- 중고 카테고리 등록 -->
	 <insert id="addUsedCategory" parameterType="java.util.Map"   >
		<selectKey resultType="int" keyProperty="prodCategoryNum" order="BEFORE">
	    	select seq_category.nextval from dual
	    </selectKey>
	    <![CDATA[
		   insert into prodcategory(
		                prodCategoryNum, 
		                PARENTCATEGORYNUM,
		                prodNum
				    )
					  			values(
					  			      #{prodCategoryNum},
					  			      #{parentCategoryNum},
					  			      #{prodNum})
		]]>
	</insert>  
	
	          <!-- 상품 후기 After 등록 -->
	 <insert id="addAfter" parameterType="java.util.Map"   >
		<selectKey resultType="int" keyProperty="afterNum" order="BEFORE">
	    	select seq_after.nextval from dual
	    </selectKey>
	    <![CDATA[
		   insert into productafter (
		                 userNum,
		                afterNum, 
		                prodNum,
                    content,
                    photo,
                    photoName,
					createDat,
					evalue
				    )
					  			values(
					  			       #{userNum},
					  			      #{afterNum},
					  			      #{prodNum},
					  			      #{content},
					  			      #{photo},
					  			      #{photoName},
					  			      sysdate,
					  			      #{evalue})
		]]>
	</insert> 
	      <!-- 상품 댓글 -->
	<insert id="addComent" parameterType="java.util.Map"   >
		<selectKey resultType="int" keyProperty="afterNum" order="BEFORE">
	    	select seq_after.nextval from dual
	    </selectKey>
	    <![CDATA[
		   insert into productafter (
		                 afterType,
		                 userNum,
		                afterNum, 
		                prodNum,
                    content,
					createDat
				    )
					  			values(
					  			     #{afterType},
					  			      #{userNum},
					  			      #{afterNum},
					  			      #{prodNum},
					  			      #{content},
					  			      CURRENT_TIMESTAMP
					  			      )
		]]>
	</insert> 
	     <!-- TEST -->   
         <select id="test" resultType="OrdersVO" parameterType="java.util.Map">
        <![CDATA[
      SELECT *
		FROM orders
		where ordernum =#{orderNum}
        ]]>
        </select>
        
        
                
		<!-- select usernum,afternum,prodnum,content,aftertype,TO_CHAR(createdat,'yyyy-mm-dd hh')as createdat
         from productafter
         where prodnum= #{prodNum}
        start with AFTERTYPE =#{afterNum}
        connect by prior afternum = AFTERTYPE
        ORDER SIBLINGS BY afternum asc -->
        
             <!-- 댓글 가져오기 -->   
         <select id="selectComment" resultType="map" parameterType="java.util.Map">
        <![CDATA[
          select level as lv,af.usernum,af.afternum,af.prodnum,af.content,af.aftertype,TO_CHAR(af.createdat,'yyyy-mm-dd hh12:mi')as createdat,
           u.content2 as image, us.id
         from productafter af ,userinfo u,users us
         where af.usernum=u.usernum
         and us.usernum=u.usernum
         and af.prodnum= #{prodNum}
        start with af.AFTERTYPE = #{afterNum}
        connect by prior af.afternum = af.AFTERTYPE
        ORDER SIBLINGS BY af.afternum asc
        ]]>
        </select>
        
        
        <!-- 결제완료 주문내역 -->
        <select id="buyCount" resultType="int" parameterType="int">
        <![CDATA[
        SELECT count(*)
		FROM orders
		where userNum =#{userNum}
		and orderType=4
        ]]>
        </select>
        
        <!-- 위시리스트 -->
       <select id="wishCount" resultType="int" parameterType="int">
        <![CDATA[
        SELECT count(*)
		FROM prodlike
		where userNum =#{userNum}
        ]]>
        </select>
        
	
			
</mapper>